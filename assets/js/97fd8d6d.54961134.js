"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7487],{6217:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>c,toc:()=>d});var s=i(4848),r=i(8453);const t={},l="Technical Report: AskDocsGPT",c={id:"server/technical-report",title:"Technical Report: AskDocsGPT",description:"Overview",source:"@site/docs/server/technical-report.md",sourceDirName:"server",slug:"/server/technical-report",permalink:"/Generative-AI/docs/server/technical-report",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Setup Guide for AskDocGPT",permalink:"/Generative-AI/docs/server/setup"},next:{title:"AskDocsGPT - Server Module Unit Tests",permalink:"/Generative-AI/docs/server/test"}},o={},d=[{value:"Overview",id:"overview",level:2},{value:"Architecture Components",id:"architecture-components",level:2},{value:"Frontend (Streamlit)",id:"frontend-streamlit",level:3},{value:"Backend (FastAPI)",id:"backend-fastapi",level:3},{value:"Vector Database (Pinecone)",id:"vector-database-pinecone",level:3},{value:"Key Technologies",id:"key-technologies",level:3},{value:"Process Flow",id:"process-flow",level:2},{value:"Challenges and Solutions",id:"challenges-and-solutions",level:2},{value:"Future Enhancements",id:"future-enhancements",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"technical-report-askdocsgpt",children:"Technical Report: AskDocsGPT"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"This solution implements a document-based question answering system using a microservices architecture, combining a\nStreamlit frontend for user interaction and a FastAPI backend for document processing and answer generation. The system\nleverages various technologies to enable efficient document indexing and intelligent question answering."}),"\n",(0,s.jsx)(n.h2,{id:"architecture-components",children:"Architecture Components"}),"\n",(0,s.jsx)(n.h3,{id:"frontend-streamlit",children:"Frontend (Streamlit)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Provides an intuitive user interface for:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Document upload (currently PDF)"}),"\n",(0,s.jsx)(n.li,{children:"Question input"}),"\n",(0,s.jsx)(n.li,{children:"Answer display"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"backend-fastapi",children:"Backend (FastAPI)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Handles document processing and question answering"}),"\n",(0,s.jsxs)(n.li,{children:["Implements RESTful endpoints for:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Document upload and processing"}),"\n",(0,s.jsx)(n.li,{children:"Question processing and answer generation"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"vector-database-pinecone",children:"Vector Database (Pinecone)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Stores document embeddings for efficient similarity search"}),"\n",(0,s.jsx)(n.li,{children:"Enables quick retrieval of relevant document chunks"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"key-technologies",children:"Key Technologies"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Document Processing"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"LangChain Document Loaders"}),"\n",(0,s.jsx)(n.li,{children:"Text splitters for chunk generation"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Embedding Generation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"OpenAI Embeddings"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Vector Storage"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Pinecone vector database"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Question Answering"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"OpenAI GPT-3.5 Turbo"}),"\n",(0,s.jsx)(n.li,{children:"LangChain QA Chain"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"process-flow",children:"Process Flow"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Document Ingestion"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"PDF upload"}),"\n",(0,s.jsx)(n.li,{children:"Text extraction and chunking"}),"\n",(0,s.jsx)(n.li,{children:"Embedding generation"}),"\n",(0,s.jsx)(n.li,{children:"Vector database storage"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Question Answering"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Question embedding generation"}),"\n",(0,s.jsx)(n.li,{children:"Similarity search in vector database"}),"\n",(0,s.jsx)(n.li,{children:"Context retrieval"}),"\n",(0,s.jsx)(n.li,{children:"Answer generation using GPT model"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"challenges-and-solutions",children:"Challenges and Solutions"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Challenge"}),": Matching dependencies\n",(0,s.jsx)(n.strong,{children:"Solution"}),": Used ",(0,s.jsx)(n.code,{children:"pip-compile"})," to manage dependencies and ensure compatibility"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Challenge"}),": Finding the required dependencies\n",(0,s.jsx)(n.strong,{children:"Solution"}),": Used ",(0,s.jsx)(n.code,{children:"pipreqs"})," to generate a list of dependencies required by the project"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Challenge"}),": Finding the right code according to the library version used\n",(0,s.jsx)(n.strong,{children:"Solution"}),": Used ",(0,s.jsx)(n.code,{children:"pipreqs"})," to generate a list of dependencies required by the project"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Challenge"}),": Answer generation quality and prevent the inappropriate answers\n",(0,s.jsx)(n.strong,{children:"Solution"}),": Tried different prompts and fine-tuned the parameters to get the best results"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Challenge"}),": Vector database integration\n",(0,s.jsx)(n.strong,{children:"Solution"}),": Used Pinecone for scalable and efficient vector storage"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Challenge"}),": Efficient document chunking\n",(0,s.jsx)(n.strong,{children:"Solution"}),": Implemented RecursiveCharacterTextSplitter for optimal chunk size"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"future-enhancements",children:"Future Enhancements"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Support for additional document types"}),"\n",(0,s.jsx)(n.li,{children:"Improved chunking strategies"}),"\n",(0,s.jsx)(n.li,{children:"Enhanced error handling and recovery"}),"\n",(0,s.jsx)(n.li,{children:"User authentication and document management"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>c});var s=i(6540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);